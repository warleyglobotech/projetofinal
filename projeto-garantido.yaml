Description: Projeto Final - Infraestrutura AWS na Virginia (Versão Corrigida com Menor Privilégio)

Parameters:
  KeyName:
    Description: Nome do Key Pair para acessar EC2
    Type: AWS::EC2::KeyPair::KeyName

  SSHLocation:
    Description: O endereco IP que pode fazer SSH (ex: 1.2.3.4/32).
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

  DBPassword:
    Description: Senha para o banco de dados RDS.
    Type: String
    NoEcho: true
    MinLength: 8

Resources:
  # 1. REDE
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Sub-redes Públicas (Para Load Balancer e NAT Gateway)
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true

  # Sub-redes Privadas (Para EC2, RDS, EFS)
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.10.0/24"
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.11.0/24"
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: false

  # Roteamento Público
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Roteamento Privado (com NAT Gateway)
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1 # NAT Gateway fica na sub-rede pública

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway # Rota para a internet via NAT

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # 2. SECURITY GROUPS (Princípio do Menor Privilégio)
  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Acesso HTTP do público para o ALB"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0" # Libera HTTP externo SÓ para o ALB

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Acesso do ALB (HTTP) e do Admin (SSH)"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation # Libera SSH SÓ para o seu IP
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup # Libera HTTP SÓ do ALB

  EFSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Permite NFS (2049) da EC2 para EFS"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref InstanceSecurityGroup # SÓ EC2s podem acessar NFS

  MyDBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group RDS"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSecurityGroup # SÓ a aplicação acessa o banco

  # 3. IAM (Corrigindo o Hardcoding)
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - 'arn:aws:s3:::jogo-da-velha-projeto-final'
                  - 'arn:aws:s3:::jogo-da-velha-projeto-final/*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # 4. LOAD BALANCER (ALB)
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "ProjetoFinalELB"
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] # ALB fica na rede pública
      SecurityGroups: [ !Ref LoadBalancerSecurityGroup ] # Usa o SG do ALB
      Scheme: "internet-facing"
      Type: "application"

  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: "HTTP"
      TargetType: "instance"
      HealthCheckPath: "/"
      HealthCheckProtocol: "HTTP"

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

  # 5. EFS (Sistema de Arquivos)
  MyEFS:
    Type: "AWS::EFS::FileSystem"
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EFS

  MyEFSMountTarget1:
    Type: "AWS::EFS::MountTarget"
    Properties:
      FileSystemId: !Ref MyEFS
      SubnetId: !Ref PrivateSubnet1 # Mount Target na rede privada
      SecurityGroups: [ !Ref EFSSecurityGroup ]

  MyEFSMountTarget2:
    Type: "AWS::EFS::MountTarget"
    Properties:
      FileSystemId: !Ref MyEFS
      SubnetId: !Ref PrivateSubnet2 # Mount Target na rede privada
      SecurityGroups: [ !Ref EFSSecurityGroup ]

  # 6. EC2 (Launch Template e Auto Scaling)
  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        ImageId: "ami-080e1f13689e07408" # AMI Ubuntu
        InstanceType: "t3.micro"
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile # Corrigido: Referencia o Profile criado na stack
        SecurityGroupIds: [ !Ref InstanceSecurityGroup ]
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install -y apache2 nfs-common awscli
            systemctl start apache2
            systemctl enable apache2
            
            mkdir -p /mnt/efs
            sleep 15
            tries=0
            # Monta o EFS
            until mount -t nfs4 -o nfsvers=4.1 ${MyEFS}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs; do
              sleep 10
              ((tries++))
              [ $tries -ge 6 ] && break
            done
            
            # Baixa os arquivos do S3 para o EFS (apenas se o EFS estiver vazio)
            if [ -z "$(ls -A /mnt/efs)" ]; then
               aws s3 cp s3://jogo-da-velha-projeto-final/jogo-da-velha /mnt/efs/ --recursive
            fi

            rm -rf /var/www/html
            ln -s /mnt/efs /var/www/html
            
            find /mnt/efs -type d -exec chmod 755 {} \;
            find /mnt/efs -type f -exec chmod 644 {} \;

  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] # EC2s na rede privada
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: "2"
      MaxSize: "4"
      DesiredCapacity: "2"
      TargetGroupARNs: [ !Ref TargetGroup ]
      HealthCheckType: "ELB"

  ScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 50.0

  # 7. RDS (Banco de Dados)
  MyDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Grupo de subnets privadas para o RDS"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  MyDBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: "20"
      DBInstanceClass: "db.t3.micro"
      Engine: "mysql"
      MasterUsername: "admin"
      MasterUserPassword: !Ref DBPassword # Corrigido: Usa o Parâmetro
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups: [ !Ref MyDBSecurityGroup ]
      PubliclyAccessible: false # Corrigido: Não é acessível publicamente
      MultiAZ: false # Para economizar custos; mude para 'true' para HA real do banco

Outputs:
  LoadBalancerDNS:
    Description: "DNS do Load Balancer"
    Value: !GetAtt LoadBalancer.DNSName
